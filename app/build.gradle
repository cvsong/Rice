/*
apply plugin: 'xxx':二进制插件
apply from: 'xxx':应用脚本插件

App插件id：com.android.application.
Library插件id：com.android.library.
Test插件id：com.android.test.
*/

apply plugin: 'com.android.application'
apply plugin: 'walle'










//签名配置信息文件
File signPropertiesFile = file('sign/keystore.properties')

/*android{}是Android插件所提供的一个扩展类型,可以用来自定义Gradle工程,是Android Gradle工程配置的唯一入口*/
android {
    /*compileSdkVersion-编译所依赖的Android SDK版本*/
    compileSdkVersion compile_sdk_version
    /*buildToolsVersion-构建该Android工程所用构建工具的版本*/
    buildToolsVersion build_tools_version

    /*编译设置*/
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    //打包配置
    //1、pickFirsts:当出现重复文件，会使用第一个匹配的文件打包进入apk
    //2、merges:当出现重复文件，合并重复的文件打入apk
    //3、excludes:打包的时候排除匹配的文件
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/ASL2.0'
    }

    /*defaultConfig{}是默认的配置,它是一个ProductFlavor.ProductFlavor允许根据不同的情况同时生成不同的apk包*/
    defaultConfig {
        /*applicationId-应用包名*/
        applicationId app_id
        /*minSdkVersion-支持的最低Android系统版本*/
        minSdkVersion min_sdk_version
        /*targetSdkVersion-基于开发的Android系统版本*/
        targetSdkVersion target_sdk_version
        /*versionCode-应用版本号*/
        versionCode version_code
        /*versionName-应用版本名称*/
        versionName version_name
        /*multiDexEnabled-用于配置该BuildType是否启用自动拆分多个Dex的功能*/
        //解决65536问题
        multiDexEnabled true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        /*分包配置*/
//        splits {
//            abi {
//                enable true
//                reset()
//                //为不同的CPU架构创建不同的APK
//                include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a' //select ABIs to build APKs for
//                //是否打出一个全量的包
//                universalApk true
//            }
//        }


    }

    /*
    sourceSets{}是源代码集合,是Java插件用来描述和管理源代码及资源的一个抽象概念.
    可用来更改源代码集合的Java目录或资源目录.
    */
    sourceSets {
        main {
            /*告诉Gradle关于jni so包的存放路径就在app/libs*/
            /*jniLibs.srcDirs=['libs']*/
        }
    }

    /*签名信息配置*/
    if (signPropertiesFile.exists()) {
        Properties properties = new Properties()
        properties.load(new FileInputStream(signPropertiesFile))
        /*签名配置*/
        signingConfigs {

            release {
                storeFile file(properties['keystore'])//签名文件
                storePassword properties['storePassword']//签名文件密码
                keyAlias properties['keyAlias']//签名证书中秘钥别名
                keyPassword properties['keyPassword']//签名证书中改密钥的密码
            }

            debug {
                storeFile file(properties['keystore_debug'])
                storePassword properties['storePassword_debug']
                keyAlias properties['keyAlias_debug']
                keyPassword properties['keyPassword_debug']
            }

        }
    }

    /*buildTypes{}构建类型*/
    buildTypes {

        release {
            minifyEnabled true//是否混淆编译
            zipAlignEnabled true//是否使用Zipalign工具压缩
            shrinkResources true//是否移除未利用的资源文件
            versionNameSuffix "-release" //版本名称后缀
            //混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (signPropertiesFile.exists()) {
                //签名配置
                signingConfig signingConfigs.release
            }
            //自定义属性
            resValue("string", "DEBUG", "false")

        }

        debug {
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            versionNameSuffix "-debug"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (signPropertiesFile.exists()) {
                signingConfig signingConfigs.debug
            }
            resValue("string", "DEBUG", "true")
        }
    }

    /* *//*Gradle3.0.0及以上,必须要给flavor定义一个维度*//*
    flavorDimensions "test"
    *//*productFlavors{}Gradle多渠道打包*//*
    productFlavors {
        riceA {
            //维度名称
            dimension "test"
            //应用版本名称
            versionName "rice-testA-v$version_name"
            //为BuildConfig文件生成自定义变量名
            buildConfigField "String", "BASE_URL", "\"testA_URL\""
            //占位符,可以通过它动态配置AndroidManifest文件一些内容
            manifestPlaceholders = [
                    APP_NAME    : "RiceA测试版"
            ]
        }


        riceB {
            dimension "test"
            versionName "rice-testB-v$version_name"
            buildConfigField "String", "BASE_URL", "\"testB_URL\""
            //占位符,可以通过它动态配置AndroidManifest文件一些内容
            manifestPlaceholders = [
                    APP_NAME    : "RiceB测试版"
            ]
        }
    }*/


}

dependencies {
    /*本地libs文件夹下的扩展名为jar的都会被依赖*/
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    /*依赖本地的module*/
    implementation project(':common_library')

    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'

    /*implementation和compile区别在于implementation指令依赖是不会传递的，即当前引用的第三方库仅限于本module内使用*/
    compile 'com.android.support.constraint:constraint-layout:1.1.0'

    // LeakCanary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakcanary_version"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakcanary_version"

    //黄油刀
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'


    // lombok 方便实体类通过注解生成相关方法
    compile 'org.projectlombok:lombok:1.16.20'
    annotationProcessor 'org.projectlombok:lombok:1.16.20'



}


import org.tmatesoft.svn.core.wc.*

def getSvnRevision() {
    try {
        ISVNOptions options = SVNWCUtil.createDefaultOptions(true)
        SVNClientManager clientManager = SVNClientManager.newInstance(options)
        SVNStatusClient statusClient = clientManager.getStatusClient()
        SVNStatus status = statusClient.doStatus(projectDir, false)
        SVNRevision revision = status.getCommittedRevision()
        return revision.getNumber()
    } catch (e) {
        return "0"
    }
}

def CVSVersionCode = getSvnRevision()



//瓦力多渠道打包配置
walle {
    // 指定渠道包的输出路径
    apkOutputFolder = new File("${project.rootDir}/multi_apk/v${version_code}_" + CVSVersionCode)
    // 定制渠道包的APK的文件名称
    apkFileNameFormat = '${projectName}-${channel}-${buildType}-v${versionName}-${versionCode}-${buildTime}-' + CVSVersionCode + '.apk'
//    projectName - 项目名字
//    appName - App模块名字
//    packageName - applicationId (App包名packageName)
//    buildType - buildType (release/debug等)
//    channel - channel名称 (对应渠道打包中的渠道名字)
//    versionName - versionName (显示用的版本号)
//    versionCode - versionCode (内部版本号)
//    buildTime - buildTime (编译构建日期时间)
//    fileSHA1 - fileSHA1 (最终APK文件的SHA1哈希值)
//    flavorName - 编译构建 productFlavors 名
    // 渠道配置文件
    channelFile = new File("${project.rootDir}/config/markets.txt")
//    configFile = new File("${project.rootDir}/config/config.json")
}

