apply plugin: 'com.android.library'


android {
    compileSdkVersion compile_sdk_version
    buildToolsVersion build_tools_version

    defaultConfig {
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version
        versionCode version_code
        versionName version_name
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [

                APP_ID_VALUE: app_id,//包名


        ]

        /*ndk{}多平台编译,生成有so库的时候使用*/
        ndk {
            moduleName "jniutil"
            //设置支持的so库架构
            abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile "com.android.support:appcompat-v7:$support_version"
    compile "com.android.support:support-v4:$support_version"
    compile "com.android.support:design:$support_version"

    testCompile 'junit:junit:4.12'

    /*解决65536问题*/
    compile 'com.android.support:multidex:1.0.3'


    /*图片加载工具-Glide*/
    compile "com.github.bumptech.glide:glide:$gilde_version"
    annotationProcessor "com.github.bumptech.glide:compiler:$gilde_version"

    /*事件总线*/
    compile 'org.greenrobot:eventbus:3.1.1'

    /*OkHttp*/
    compile 'com.squareup.okhttp3:okhttp:3.9.0'

    /*Gson*/
    compile 'com.google.code.gson:gson:2.8.2'



    /*刷新控件*/
    compile "com.scwang.smartrefresh:SmartRefreshLayout:$smart_refresh_layout"
    compile "com.scwang.smartrefresh:SmartRefreshHeader:$smart_refresh_layout"//没有使用特殊Header，可以不加这行



    /*RxJava*/
    compile "io.reactivex.rxjava2:rxjava:2.1.8"

    /*Zxing二维码扫描*/
    compile 'com.journeyapps:zxing-android-embedded:3.5.0'
    compile 'com.google.zxing:core:3.3.1'

    /*BaseRecyclerViewAdapterHelper*/
    compile 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.40'


    /*百分比布局*/
    compile "com.android.support:percent:$support_version"


    /*图片获取框架*/
//    compile 'org.devio.takephoto:takephoto_library:4.1.0'

    /*集成友盟统计*/
    compile 'com.umeng.sdk:common:1.5.0'
    compile 'com.umeng.sdk:analytics:7.5.0'

    /*图片裁剪库*/
    compile 'com.soundcloud.android.crop:lib_crop:1.0.0'
    /*图片选择库*/
    compile 'com.darsh.multipleimageselect:multipleimageselect:1.0.5'
    /*图片压缩库*/
    compile 'me.shaohui.advancedluban:library:1.3.2'


//    implementation 'com.blankj:utilcode:1.19.0'

}





/*面向AOP编程的AspectJ框架配置*/

//import org.aspectj.bridge.IMessage
//import org.aspectj.bridge.MessageHandler
//import org.aspectj.tools.ajc.Main
////获取 log 打印工具和构建配置
//final def log = project.logger
//final def variants = project.android.applicationVariants
//
//variants.all { variant ->
//    //判断是否 debug，如果打 release 把 return 去掉就可以
//    if (!variant.buildType.isDebuggable()) {
//        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
//        return;
//    }
//    //使 aspectj 配置生效
//    JavaCompile javaCompile = variant.javaCompile
//    javaCompile.doLast {
//        String[] args = ["-showWeaveInfo",
//                         "-1.8",
//                         "-inpath", javaCompile.destinationDir.toString(),
//                         "-aspectpath", javaCompile.classpath.asPath,
//                         "-d", javaCompile.destinationDir.toString(),
//                         "-classpath", javaCompile.classpath.asPath,
//                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
//        log.debug "ajc args: " + Arrays.toString(args)
//
//        MessageHandler handler = new MessageHandler(true);
//        new Main().run(args, handler);
//        //编译时打印信息如警告、error 等等
//        for (IMessage message : handler.getMessages(null, true)) {
//            switch (message.getKind()) {
//                case IMessage.ABORT:
//                case IMessage.ERROR:
//                case IMessage.FAIL:
//                    log.error message.message, message.thrown
//                    break;
//                case IMessage.WARNING:
//                    log.warn message.message, message.thrown
//                    break;
//                case IMessage.INFO:
//                    log.info message.message, message.thrown
//                    break;
//                case IMessage.DEBUG:
//                    log.debug message.message, message.thrown
//                    break;
//            }
//        }
//    }
//}



